import os

cwd = os.getcwd()

env = Environment()

# 工程名
env["project_name"] = "sconsTest"

inc_path = [
    cwd,
    cwd + '/inc',
    cwd + '/httpclient/include',
    cwd + '/cJSON',
    cwd + '/mbedtls']
# inc_path = [cwd + '/inc']

#
env.Append(CCFLAGS = ['-g'])
env.Append(CPPPATH = [inc_path])

# 生成文件位置
env['build_bin_root'] = ['#/build/bin/']

#Export 和子目录的Import对应，是为了传递env变量
Export('env')

objs = []

VariantDir('build', 'src')

# #src目录的文件包含程序入口执行的main函数, 需要编成object, 并且放到obj最开始，就不用考虑库循环链接的问题
# objs += SConscript('src/SConscript', variant_dir="build/src", duplicate=0)

list = os.listdir(cwd)
for d in list:
    path = os.path.join(cwd, d)
    # if os.path.isfile(os.path.join(path, 'SConscript')) and not d == 'src': #不再编译src目录
    if os.path.isfile(os.path.join(path, 'SConscript')):
        objs = objs + SConscript(os.path.join(d, 'SConscript'), variant_dir="build/" + d, duplicate=0)

# 构建可执行文件
bin = env.Program(target = env["project_name"], source = objs )
env.Install(env["build_bin_root"], bin)